{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/lucaschenu/Archivo-materia-IA/blob/main/AULA_5.%20IA\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LsXR8-Jemh3v"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#importar base de dados\n",
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "WwQiKRkMn4va",
        "outputId": "75582df3-b86a-41c5-f521-a552ee43679c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-b214b4bc-ad03-40ef-baf3-22af6109f30e\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-b214b4bc-ad03-40ef-baf3-22af6109f30e\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving 01-04T184148_000_mode1.csv to 01-04T184148_000_mode1.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ler o arquivo csv\n",
        "df= pd.read_csv(\"01-04T184148_000_mode1.csv\")"
      ],
      "metadata": {
        "id": "buYyxDyXoKlT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#exibir informacoes basicas\n",
        "print (f\"dimensoes dodataset: df.shape\")\n",
        "print(f\"/n primeiras linhas do dataset:/ n(df.head())\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xt7rP9WIoe5d",
        "outputId": "77f954b6-e2a0-4878-da71-79cb873db44f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dimensoes dodataset: df.shape\n",
            "/n primeiras linhas do dataset:/ n(df.head())\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#selecionar apenas colunas numericas\n",
        "numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()\n",
        "numeric_cols\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HG_AxumvpRUt",
        "outputId": "d5cebdc8-0a9e-41c6-edb1-d0b315987b4d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['timestamp',\n",
              " 'pCut::Motor_Torque',\n",
              " 'pCut::CTRL_Position_controller::Lag_error',\n",
              " 'pCut::CTRL_Position_controller::Actual_position',\n",
              " 'pCut::CTRL_Position_controller::Actual_speed',\n",
              " 'pSvolFilm::CTRL_Position_controller::Actual_position',\n",
              " 'pSvolFilm::CTRL_Position_controller::Actual_speed',\n",
              " 'pSvolFilm::CTRL_Position_controller::Lag_error',\n",
              " 'pSpintor::VAX_speed']"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#selecionar as colunas numericas para um modelo\n",
        "x= df[numeric_cols]\n",
        "y=df[\"pCut::Motor_Torque\"]"
      ],
      "metadata": {
        "id": "T0dVMqdep5XE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#VERIFICAR VALORES FALTANTES EM CADA COLUNA\n",
        "cols_to_remove=[]\n",
        "for col in x.columns:\n",
        "  missing_count= x[col].isna().sum()\n",
        "  if missing_count > 0 :\n",
        "    cols_to_remove.append(col)\n",
        "cols_to_remove\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "abJLc_5sqTgd",
        "outputId": "7e178680-26cd-40f0-e6bc-ce37ffd1dc48"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[]"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for col in cols_to_remove:\n",
        "  x=x.drop(col, axis=1)"
      ],
      "metadata": {
        "id": "U7u7LdUKrQwk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#remover target to x\n",
        "x=x.drop(\"pCut::Motor_Torque\", axis=1)"
      ],
      "metadata": {
        "id": "ohy0KPgArfil"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#dividir em conjunto detreinamento e de validacao\n",
        "from sklearn.model_selection import train_test_split\n",
        "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size= 0.3 , random_state=42)"
      ],
      "metadata": {
        "id": "5HUXVAoVrrE3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression, Ridge , Lasso"
      ],
      "metadata": {
        "id": "emloPW-rsQam"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#treinar a regressao linear\n",
        "model_val_cruz= LinearRegression()\n",
        "model_val_cruz.fit(x_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "cyysdHu7seCK",
        "outputId": "186eaaa5-c481-49f8-a26c-029e5855cc16"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-2 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-2 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-2 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-2 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-2 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LinearRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#fazer predicoes no conjunto de validacao (test)\n",
        "y_pred= model_val_cruz.predict(x_test)\n"
      ],
      "metadata": {
        "id": "EKaXjBtmsvfT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_squared_error, r2_score"
      ],
      "metadata": {
        "id": "MSLIFL1Bs7gN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#calcular\n",
        "r2_val_cruz= r2_score(y_test, y_pred)\n",
        "mse_val_cruz= mean_squared_error(y_test, y_pred)"
      ],
      "metadata": {
        "id": "LYNXq99mtCyr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"r2 scores: (r2_val_cruz)\")\n",
        "print(f\"mse: (mse_val_cruz)\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Dmwmoj4NtT7v",
        "outputId": "e7263f9f-07bf-46ee-f5f1-db529b1216aa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "r2 scores: (r2_val_cruz)\n",
            "mse: (mse_val_cruz)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#utilizar o metodo de k-fold cross validation\n",
        "k=10\n",
        "n_samples= len(x)\n",
        "fold_size= n_samples//k\n",
        "cv_scores=[]\n"
      ],
      "metadata": {
        "id": "kYqV9YP_ti1G"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n",
        "\n",
        "for fold in range(k):\n",
        "  print(f\"fold {fold + 1}\")\n",
        "  start_idx=fold*fold_size\n",
        "  end_idx= start_idx + fold_size if fold< k-1 else n_samples\n",
        "  test_ind_fold=list (range(start_idx, end_idx))\n",
        "  train_ind_fold=list (range(0, start_idx))+list(range(end_idx, n_samples))\n",
        "\n",
        "  #separar dados\n",
        "  x_train_fold=x.iloc[train_ind_fold]\n",
        "  y_train_fold=y.iloc[train_ind_fold]\n",
        "  x_test_fold=x.iloc[test_ind_fold]\n",
        "  y_test_fold=y.iloc[test_ind_fold]\n",
        "\n",
        "  #treinar o modelo e prever o test\n",
        "  model_fold= LinearRegression()\n",
        "  model_fold.fit(x_train_fold, y_train_fold)\n",
        "  y_pred_fold=model_fold.predict(x_test_fold)\n",
        "\n",
        "  #calcular as metricas do fold\n",
        "  mse_fold=mean_squared_error (y_test_fold, y_pred_fold)\n",
        "  mae_fold=mean_absolute_error(y_test_fold, y_pred_fold)\n",
        "  r2_fold=r2_score( y_test_fold, y_pred_fold)\n",
        "\n",
        "  cv_scores.append({\n",
        "      'fold': fold + 1,\n",
        "      'mse': mse_fold,\n",
        "      'mae': mae_fold,\n",
        "      'r2': r2_fold\n",
        "  })"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "psRZL3jDtT4n",
        "outputId": "49b382e5-94b6-41a0-95bc-02c74fdc1c1b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "fold 1\n",
            "fold 2\n",
            "fold 3\n",
            "fold 4\n",
            "fold 5\n",
            "fold 6\n",
            "fold 7\n",
            "fold 8\n",
            "fold 9\n",
            "fold 10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#exibir metricas\n",
        "r2_scores = [score['r2'] for score in cv_scores]\n",
        "print(f\"\\n scores r2 para cada fold: {r2_scores} \")\n",
        "print(f\"\\n media r2: {np.mean(r2_scores)}\")\n",
        "print(f\"\\ndesvio padrao r2: {np.std(r2_scores)}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8lSeAQ7DxKn5",
        "outputId": "ab35488f-0520-4a7d-ae63-fe8a616b17f4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " scores r2 para cada fold: [0.8710109459752733, 0.5209167866311148, -2.3062952714889824, 0.3872614810320434, 0.49837758546551714, 0.14979194811863294, 0.6107504962292003, 0.2718897383647514, 0.5681115712677691, 0.27395895158567984] \n",
            "\n",
            " media r2: 0.18457742331809998\n",
            "\n",
            "desvio padrao r2: 0.8528691433654431\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "r2_scores = [score['r2'] for score in cv_scores]\n",
        "np.mean(r2_scores)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Qr2zsS29xyoZ",
        "outputId": "cc413001-f6e6-4e17-f5cf-3023ce63d3ea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "np.float64(0.18457742331809998)"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#bootstrap\n",
        "n_bootstraps= 100\n",
        "n_samples=len(x)\n",
        "r2_score_boot=[]\n",
        "coeficients_boot=[]\n",
        "\n"
      ],
      "metadata": {
        "id": "p8s_E3VpzK0b"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#executar o bootstrap\n",
        "for i in range(n_bootstraps):\n",
        "  print(f\"executando iteracao {i+1}\")\n",
        "\n",
        "  #amostragem\n",
        "  bootstrap_ind=np.random.choice(range(n_samples), n_samples, replace=True)\n",
        "  x_boot=x.iloc[bootstrap_ind]\n",
        "  y_boot=y.iloc[bootstrap_ind]\n",
        "\n",
        "  #treinar um modelo para cada um\n",
        "  model_boot=LinearRegression()\n",
        "  model_boot.fit(x_boot, y_boot)\n",
        "\n",
        "  #fazer predicoes\n",
        "  y_pred_boot=model_boot.predict(x_test)\n",
        "\n",
        "  #calcular r2\n",
        "  r2_boot=r2_score(y_test,y_pred_boot)\n",
        "  r2_score_boot.append(r2_boot)\n",
        "  #calcular coeficients\n",
        "  coeficients_boot.append(model_boot.coef_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yvs5e3UYz_m6",
        "outputId": "c02c81bc-9454-42cb-88d3-50ab2146f4cc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "executando iteracao 1\n",
            "executando iteracao 2\n",
            "executando iteracao 3\n",
            "executando iteracao 4\n",
            "executando iteracao 5\n",
            "executando iteracao 6\n",
            "executando iteracao 7\n",
            "executando iteracao 8\n",
            "executando iteracao 9\n",
            "executando iteracao 10\n",
            "executando iteracao 11\n",
            "executando iteracao 12\n",
            "executando iteracao 13\n",
            "executando iteracao 14\n",
            "executando iteracao 15\n",
            "executando iteracao 16\n",
            "executando iteracao 17\n",
            "executando iteracao 18\n",
            "executando iteracao 19\n",
            "executando iteracao 20\n",
            "executando iteracao 21\n",
            "executando iteracao 22\n",
            "executando iteracao 23\n",
            "executando iteracao 24\n",
            "executando iteracao 25\n",
            "executando iteracao 26\n",
            "executando iteracao 27\n",
            "executando iteracao 28\n",
            "executando iteracao 29\n",
            "executando iteracao 30\n",
            "executando iteracao 31\n",
            "executando iteracao 32\n",
            "executando iteracao 33\n",
            "executando iteracao 34\n",
            "executando iteracao 35\n",
            "executando iteracao 36\n",
            "executando iteracao 37\n",
            "executando iteracao 38\n",
            "executando iteracao 39\n",
            "executando iteracao 40\n",
            "executando iteracao 41\n",
            "executando iteracao 42\n",
            "executando iteracao 43\n",
            "executando iteracao 44\n",
            "executando iteracao 45\n",
            "executando iteracao 46\n",
            "executando iteracao 47\n",
            "executando iteracao 48\n",
            "executando iteracao 49\n",
            "executando iteracao 50\n",
            "executando iteracao 51\n",
            "executando iteracao 52\n",
            "executando iteracao 53\n",
            "executando iteracao 54\n",
            "executando iteracao 55\n",
            "executando iteracao 56\n",
            "executando iteracao 57\n",
            "executando iteracao 58\n",
            "executando iteracao 59\n",
            "executando iteracao 60\n",
            "executando iteracao 61\n",
            "executando iteracao 62\n",
            "executando iteracao 63\n",
            "executando iteracao 64\n",
            "executando iteracao 65\n",
            "executando iteracao 66\n",
            "executando iteracao 67\n",
            "executando iteracao 68\n",
            "executando iteracao 69\n",
            "executando iteracao 70\n",
            "executando iteracao 71\n",
            "executando iteracao 72\n",
            "executando iteracao 73\n",
            "executando iteracao 74\n",
            "executando iteracao 75\n",
            "executando iteracao 76\n",
            "executando iteracao 77\n",
            "executando iteracao 78\n",
            "executando iteracao 79\n",
            "executando iteracao 80\n",
            "executando iteracao 81\n",
            "executando iteracao 82\n",
            "executando iteracao 83\n",
            "executando iteracao 84\n",
            "executando iteracao 85\n",
            "executando iteracao 86\n",
            "executando iteracao 87\n",
            "executando iteracao 88\n",
            "executando iteracao 89\n",
            "executando iteracao 90\n",
            "executando iteracao 91\n",
            "executando iteracao 92\n",
            "executando iteracao 93\n",
            "executando iteracao 94\n",
            "executando iteracao 95\n",
            "executando iteracao 96\n",
            "executando iteracao 97\n",
            "executando iteracao 98\n",
            "executando iteracao 99\n",
            "executando iteracao 100\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#histograma do r2 score\n",
        "sorted_r2= np.sort(r2_score_boot)\n",
        "plt.hist(r2_score_boot, bins=20, edgecolor='black')\n",
        "plt.title('Distribuição do R2 Score (Bootstrap)')\n",
        "plt.xlabel('R2 Score')\n",
        "plt.ylabel('Frequência')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "QagCH0CL1u6W",
        "outputId": "96a2dd5b-9c9f-48a2-dd76-8e7d7e3e6e50"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "r2_score_boot"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NsRetn5r2MNd",
        "outputId": "836a4456-57df-47f2-8a36-09312ab548e6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.7434213921293119,\n",
              " 0.748159141396853,\n",
              " 0.7464830983102655,\n",
              " 0.7498982193135078,\n",
              " 0.7478683029742393,\n",
              " 0.7455901157792951,\n",
              " 0.7416105306889197,\n",
              " 0.7492825607477855,\n",
              " 0.748683577709915,\n",
              " 0.7483115949865141,\n",
              " 0.7497563799288295,\n",
              " 0.7324226312253392,\n",
              " 0.7330127011540613,\n",
              " 0.7500259391347209,\n",
              " 0.749386097209578,\n",
              " 0.7507192315481557,\n",
              " 0.7443998054398282,\n",
              " 0.7511896489051498,\n",
              " 0.728274493448992,\n",
              " 0.7345360914936421,\n",
              " 0.7405521245069169,\n",
              " 0.7353653234134303,\n",
              " 0.748394885443088,\n",
              " 0.7447322998819743,\n",
              " 0.7285412840835466,\n",
              " 0.7506240982913162,\n",
              " 0.7417829712096125,\n",
              " 0.7304358605113249,\n",
              " 0.7492767022565674,\n",
              " 0.7353959018061994,\n",
              " 0.7493477298079227,\n",
              " 0.7468819806500697,\n",
              " 0.7465872188069342,\n",
              " 0.7370090129175537,\n",
              " 0.747029433763927,\n",
              " 0.7469686179745705,\n",
              " 0.7456783519344246,\n",
              " 0.7334100075806218,\n",
              " 0.7478739958688574,\n",
              " 0.7494290102022683,\n",
              " 0.7378270152559028,\n",
              " 0.750278964325078,\n",
              " 0.747126618557605,\n",
              " 0.7492696874872853,\n",
              " 0.7495588677536393,\n",
              " 0.7384135331501795,\n",
              " 0.7202942104630776,\n",
              " 0.7423511848937088,\n",
              " 0.7406825811038467,\n",
              " 0.7430105084985168,\n",
              " 0.7494868809574593,\n",
              " 0.7496499929350056,\n",
              " 0.7479771446997309,\n",
              " 0.7506282302864717,\n",
              " 0.7463547889612311,\n",
              " 0.7393390056813638,\n",
              " 0.7512335618896702,\n",
              " 0.7450478901284278,\n",
              " 0.7509449541589456,\n",
              " 0.7470025899134747,\n",
              " 0.7490888501276891,\n",
              " 0.74123764363676,\n",
              " 0.7461604894735971,\n",
              " 0.7225590079011748,\n",
              " 0.7496019803377034,\n",
              " 0.7479651373315319,\n",
              " 0.7363936622468342,\n",
              " 0.7313174906924811,\n",
              " 0.7336083194082754,\n",
              " 0.7483104492786601,\n",
              " 0.7462031976337498,\n",
              " 0.729234805625232,\n",
              " 0.7492254722081483,\n",
              " 0.7374213519040472,\n",
              " 0.7399812965781647,\n",
              " 0.7498656596300519,\n",
              " 0.7490738863232363,\n",
              " 0.7355538269584939,\n",
              " 0.7446657997156898,\n",
              " 0.7493965781893202,\n",
              " 0.7401986805224527,\n",
              " 0.7308618957111483,\n",
              " 0.7506214299533152,\n",
              " 0.7502856891135081,\n",
              " 0.738920140738506,\n",
              " 0.7392100316561117,\n",
              " 0.732588329294346,\n",
              " 0.7500292725406296,\n",
              " 0.719127220531065,\n",
              " 0.7485094222189694,\n",
              " 0.7478297765218596,\n",
              " 0.7434589925862574,\n",
              " 0.7335518290580763,\n",
              " 0.7510542986970516,\n",
              " 0.7423462240331168,\n",
              " 0.7434550612383939,\n",
              " 0.7391869518823312,\n",
              " 0.7447209313518913,\n",
              " 0.7382921643689639,\n",
              " 0.7468875392233076]"
            ]
          },
          "metadata": {},
          "execution_count": 68
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#selecao dee modelos\n",
        "#forward selection\n",
        "\n",
        "current_features=[]\n",
        "remaind_features=x.columns.tolist()\n",
        "best_r2= 0\n",
        "significante_level=0.05"
      ],
      "metadata": {
        "id": "HqU5OTR12jpr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import statsmodels.api as sm"
      ],
      "metadata": {
        "id": "LiyMZa5028B8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#fazer op rocesso forward selection\n",
        "iteration= 1\n",
        "while remaind_features:\n",
        "  print(f\"iteration: {iteration}\\n\")\n",
        "  best_new_feature= None\n",
        "  best_new_score= -np.inf\n",
        "  best_pvalue=1.0\n",
        "\n",
        "  #testar cada feature\n",
        "  for feature in remaind_features:\n",
        "    test_features= current_features + [feature]\n",
        "    x_temp = x[test_features]\n",
        "    x_temp_constant=sm.add_constant(x_temp)\n",
        "\n",
        "    #treinar o modelo\n",
        "    model = sm.OLS(y, x_temp_constant).fit()\n",
        "\n",
        "    #obter o r2 ajustado e p-value\n",
        "    adjusted_r2 = model.rsquared_adj\n",
        "    pvalue = model.pvalues[feature]\n",
        "\n",
        "    #verificar se a feature melhora o modelo e e significativa\n",
        "    if adjusted_r2 > best_new_score and pvalue < significante_level:\n",
        "      best_new_score= adjusted_r2\n",
        "      best_new_feature= feature\n",
        "      best_pvalue = pvalue\n",
        "\n",
        "  #adicionar a melhor feature\n",
        "  if best_new_feature:\n",
        "    current_features.append(best_new_feature)\n",
        "    remaind_features.remove(best_new_feature)\n",
        "    print(f\"adicionando feature: {best_new_feature} (Adjusted R2: {best_new_score:.4f}, p-value: {best_pvalue:.4f})\")\n",
        "  else:\n",
        "    print(\"nenhuma feature adicional melhora o modelo de forma significativa.\")\n",
        "    break\n",
        "  iteration += 1\n",
        "\n",
        "print(\"\\nfeatures selecionadas:\")\n",
        "print(current_features)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bdpq65oC3GcI",
        "outputId": "0446f661-e6d5-4f27-b27d-12906f5b7103"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "iteration: 1\n",
            "\n",
            "adicionando feature: pCut::CTRL_Position_controller::Actual_speed (Adjusted R2: 0.4599, p-value: 0.0000)\n",
            "iteration: 2\n",
            "\n",
            "adicionando feature: pCut::CTRL_Position_controller::Lag_error (Adjusted R2: 0.6499, p-value: 0.0000)\n",
            "iteration: 3\n",
            "\n",
            "adicionando feature: pSvolFilm::CTRL_Position_controller::Actual_speed (Adjusted R2: 0.6614, p-value: 0.0000)\n",
            "iteration: 4\n",
            "\n",
            "adicionando feature: pSvolFilm::CTRL_Position_controller::Lag_error (Adjusted R2: 0.6920, p-value: 0.0000)\n",
            "iteration: 5\n",
            "\n",
            "adicionando feature: pSvolFilm::CTRL_Position_controller::Actual_position (Adjusted R2: 0.6926, p-value: 0.0190)\n",
            "iteration: 6\n",
            "\n",
            "adicionando feature: pCut::CTRL_Position_controller::Actual_position (Adjusted R2: 0.7377, p-value: 0.0000)\n",
            "iteration: 7\n",
            "\n",
            "adicionando feature: timestamp (Adjusted R2: 0.7402, p-value: 0.0000)\n",
            "iteration: 8\n",
            "\n",
            "adicionando feature: pSpintor::VAX_speed (Adjusted R2: 0.7407, p-value: 0.0280)\n",
            "\n",
            "features selecionadas:\n",
            "['pCut::CTRL_Position_controller::Actual_speed', 'pCut::CTRL_Position_controller::Lag_error', 'pSvolFilm::CTRL_Position_controller::Actual_speed', 'pSvolFilm::CTRL_Position_controller::Lag_error', 'pSvolFilm::CTRL_Position_controller::Actual_position', 'pCut::CTRL_Position_controller::Actual_position', 'timestamp', 'pSpintor::VAX_speed']\n"
          ]
        }
      ]
    }
  ]
}
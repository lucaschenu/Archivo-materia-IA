{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/lucaschenu/Archivo-materia-IA/blob/main/WEEKLY_REPORT_2_DADOS_LUCAS.ipynb%20tercera%20entrega\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BfAUYMWf42ma"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression, Ridge, Lasso\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Leitura da base de dados\n",
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "C67yoZD55Bet",
        "outputId": "e83737f9-389a-435b-c401-83946151b228"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-99c9f0c0-ff8f-4b4c-9858-26809c1baa18\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-99c9f0c0-ff8f-4b4c-9858-26809c1baa18\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving 01-04T184148_000_mode1.csv to 01-04T184148_000_mode1 (1).csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"01-04T184148_000_mode1.csv\")"
      ],
      "metadata": {
        "id": "YC8lQrQF71n_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Verificação inicial dos dados\n",
        "print(\"Visualização inicial dos dados:\")\n",
        "print(df.head())\n",
        "\n",
        "print(\"\\nDimensões do dataset:\")\n",
        "print(df.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uagXXC6A-7_p",
        "outputId": "a9a8e98b-48e3-4873-83aa-cc5e3e26c986"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Visualização inicial dos dados:\n",
            "   timestamp  pCut::Motor_Torque  pCut::CTRL_Position_controller::Lag_error  \\\n",
            "0      0.008            0.199603                                   0.027420   \n",
            "1      0.012            0.281624                                   0.002502   \n",
            "2      0.016            0.349315                                  -0.018085   \n",
            "3      0.020            0.444450                                  -0.054680   \n",
            "4      0.024            0.480923                                  -0.042770   \n",
            "\n",
            "   pCut::CTRL_Position_controller::Actual_position  \\\n",
            "0                                        628392628   \n",
            "1                                        628392625   \n",
            "2                                        628392621   \n",
            "3                                        628392617   \n",
            "4                                        628392613   \n",
            "\n",
            "   pCut::CTRL_Position_controller::Actual_speed  \\\n",
            "0                                   -920.104980   \n",
            "1                                   -937.271118   \n",
            "2                                   -951.004028   \n",
            "3                                  -1019.668579   \n",
            "4                                  -1023.101807   \n",
            "\n",
            "   pSvolFilm::CTRL_Position_controller::Actual_position  \\\n",
            "0                                            5298555      \n",
            "1                                            5298565      \n",
            "2                                            5298575      \n",
            "3                                            5298585      \n",
            "4                                            5298595      \n",
            "\n",
            "   pSvolFilm::CTRL_Position_controller::Actual_speed  \\\n",
            "0                                        2441.235352   \n",
            "1                                        2453.819092   \n",
            "2                                        2476.469727   \n",
            "3                                        2501.637207   \n",
            "4                                        2519.254395   \n",
            "\n",
            "   pSvolFilm::CTRL_Position_controller::Lag_error  pSpintor::VAX_speed  \n",
            "0                                        0.899543          1379.999756  \n",
            "1                                        0.874072          1379.999756  \n",
            "2                                        0.879806          1379.999756  \n",
            "3                                        0.837500          1379.999756  \n",
            "4                                        0.905347          1379.999756  \n",
            "\n",
            "Dimensões do dataset:\n",
            "(2048, 9)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Tratamento básico\n",
        "df = df.dropna()  # remove linhas com valores ausentes"
      ],
      "metadata": {
        "id": "aA5DYSu5_CkY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Verificar dados ausentes\n",
        "print(\"\\nValores ausentes por coluna:\")\n",
        "print(df.isnull().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OauJX8ay76N7",
        "outputId": "15f4c274-6b8b-4b02-9764-afd71acf3b13"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Valores ausentes por coluna:\n",
            "timestamp                                               0\n",
            "pCut::Motor_Torque                                      0\n",
            "pCut::CTRL_Position_controller::Lag_error               0\n",
            "pCut::CTRL_Position_controller::Actual_position         0\n",
            "pCut::CTRL_Position_controller::Actual_speed            0\n",
            "pSvolFilm::CTRL_Position_controller::Actual_position    0\n",
            "pSvolFilm::CTRL_Position_controller::Actual_speed       0\n",
            "pSvolFilm::CTRL_Position_controller::Lag_error          0\n",
            "pSpintor::VAX_speed                                     0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Tratar valores ausentes (remoção de linhas vazias)\n",
        "df = df.dropna()"
      ],
      "metadata": {
        "id": "OYPMi-Zj79vG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Identificação das colunas disponíveis\n",
        "print(\"\\nColunas disponíveis:\")\n",
        "print(df.columns.tolist())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tuuWh7pI_MxW",
        "outputId": "7695a019-dbaf-4537-8002-aad3cfd2662e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Colunas disponíveis:\n",
            "['timestamp', 'pCut::Motor_Torque', 'pCut::CTRL_Position_controller::Lag_error', 'pCut::CTRL_Position_controller::Actual_position', 'pCut::CTRL_Position_controller::Actual_speed', 'pSvolFilm::CTRL_Position_controller::Actual_position', 'pSvolFilm::CTRL_Position_controller::Actual_speed', 'pSvolFilm::CTRL_Position_controller::Lag_error', 'pSpintor::VAX_speed']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Ajuste o nome da coluna alvo conforme o dataset\n",
        "target_col = \"pSpintor::VAX_speed\"  # <-- edite aqui se necessário"
      ],
      "metadata": {
        "id": "PQ84v39A_P4B"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Separação entre variáveis independentes (X) e dependente (y)\n",
        "X = df.drop(columns=[target_col])\n",
        "y = df[target_col]"
      ],
      "metadata": {
        "id": "6dr9aRqx_Xdr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#  Divisão treino/teste\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "mD8hlR3q_aQV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#  Normalização (necessária para Ridge e Lasso)\n",
        "scaler = StandardScaler()\n",
        "X_train_scaled = scaler.fit_transform(X_train)\n",
        "X_test_scaled = scaler.transform(X_test)"
      ],
      "metadata": {
        "id": "4FVNP1Iw_dE3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Inicialização dos modelos\n",
        "models = {\n",
        "    \"OLS\": LinearRegression(),\n",
        "    \"Ridge\": Ridge(alpha=1.0, random_state=42),\n",
        "    \"Lasso\": Lasso(alpha=0.01, random_state=42, max_iter=10000),\n",
        "    \"Random Forest\": RandomForestRegressor(random_state=42, n_estimators=100)\n",
        "}"
      ],
      "metadata": {
        "id": "SW4umK57_gko"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#  Definir variáveis independentes (X) e dependente (y)\n",
        "# Use df.columns para ver os nomes disponíveis\n",
        "print(\"\\nColunas do DataFrame:\")\n",
        "print(df.columns)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uhwseYKq8B9L",
        "outputId": "83311724-5d42-4305-88d5-fe899fd69a93"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Colunas do DataFrame:\n",
            "Index(['timestamp', 'pCut::Motor_Torque',\n",
            "       'pCut::CTRL_Position_controller::Lag_error',\n",
            "       'pCut::CTRL_Position_controller::Actual_position',\n",
            "       'pCut::CTRL_Position_controller::Actual_speed',\n",
            "       'pSvolFilm::CTRL_Position_controller::Actual_position',\n",
            "       'pSvolFilm::CTRL_Position_controller::Actual_speed',\n",
            "       'pSvolFilm::CTRL_Position_controller::Lag_error',\n",
            "       'pSpintor::VAX_speed'],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Função para calcular métricas\n",
        "def calc_metrics(y_true, y_pred):\n",
        "    rmse = np.sqrt(mean_squared_error(y_true, y_pred))\n",
        "    mae = mean_absolute_error(y_true, y_pred)\n",
        "    r2 = r2_score(y_true, y_pred)\n",
        "    return rmse, mae, r2"
      ],
      "metadata": {
        "id": "rDfqTBQX_pK0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Treinamento e avaliação dos modelos\n",
        "results = []\n",
        "\n",
        "for name, model in models.items():\n",
        "    print(f\"\\nTreinando modelo: {name}...\")\n",
        "\n",
        "    # Ridge e Lasso usam os dados normalizados\n",
        "    if name in [\"Ridge\", \"Lasso\"]:\n",
        "        model.fit(X_train_scaled, y_train)\n",
        "        y_pred = model.predict(X_test_scaled)\n",
        "    else:\n",
        "        model.fit(X_train, y_train)\n",
        "        y_pred = model.predict(X_test)\n",
        "\n",
        "    rmse, mae, r2 = calc_metrics(y_test, y_pred)\n",
        "    results.append([name, rmse, mae, r2])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pzvMbUBG_taa",
        "outputId": "90e9e599-a8a2-4590-cf53-90dee529821c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Treinando modelo: OLS...\n",
            "\n",
            "Treinando modelo: Ridge...\n",
            "\n",
            "Treinando modelo: Lasso...\n",
            "\n",
            "Treinando modelo: Random Forest...\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#  Resultados consolidados\n",
        "df_results = pd.DataFrame(results, columns=[\"Modelo\", \"RMSE\", \"MAE\", \"R²\"])\n",
        "df_results = df_results.sort_values(by=\"R²\", ascending=False)\n",
        "\n",
        "print(\"\\n============================\")\n",
        "print(\"Resultados Comparativos\")\n",
        "print(\"============================\")\n",
        "print(df_results)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V9Ikq56a_x7U",
        "outputId": "d3869046-77e3-420b-a90c-9bcaa1281756"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "============================\n",
            "Resultados Comparativos\n",
            "============================\n",
            "          Modelo       RMSE        MAE        R²\n",
            "3  Random Forest   0.381565   0.049297  0.999971\n",
            "0            OLS  42.256139  34.640957  0.648869\n",
            "2          Lasso  42.291756  34.750304  0.648277\n",
            "1          Ridge  43.672026  37.470296  0.624944\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Observações automáticas\n",
        "print(\"\\nObservações:\")\n",
        "if df_results.loc[df_results[\"Modelo\"] == \"OLS\", \"R²\"].values[0] < 0:\n",
        "    print(\"⚠️ A regressão OLS apresentou instabilidade numérica.\")\n",
        "else:\n",
        "    print(\"OLS executado normalmente.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rXTPquDG_1ys",
        "outputId": "9f8ef35c-254c-4a62-d992-f950b42ce43d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Observações:\n",
            "OLS executado normalmente.\n"
          ]
        }
      ]
    }
  ]
}